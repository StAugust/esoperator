/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/staugust/esoperator/pkg/apis/augusto.cn/v1"
	scheme "github.com/staugust/esoperator/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// EsClusterListsGetter has a method to return a EsClusterListInterface.
// A group's client should implement this interface.
type EsClusterListsGetter interface {
	EsClusterLists(namespace string) EsClusterListInterface
}

// EsClusterListInterface has methods to work with EsClusterList resources.
type EsClusterListInterface interface {
	Create(*v1.EsClusterList) (*v1.EsClusterList, error)
	Update(*v1.EsClusterList) (*v1.EsClusterList, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.EsClusterList, error)
	List(opts metav1.ListOptions) (*v1.EsClusterListList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.EsClusterList, err error)
	EsClusterListExpansion
}

// esClusterLists implements EsClusterListInterface
type esClusterLists struct {
	client rest.Interface
	ns     string
}

// newEsClusterLists returns a EsClusterLists
func newEsClusterLists(c *AugustoV1Client, namespace string) *esClusterLists {
	return &esClusterLists{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the esClusterList, and returns the corresponding esClusterList object, and an error if there is any.
func (c *esClusterLists) Get(name string, options metav1.GetOptions) (result *v1.EsClusterList, err error) {
	result = &v1.EsClusterList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("esclusterlists").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of EsClusterLists that match those selectors.
func (c *esClusterLists) List(opts metav1.ListOptions) (result *v1.EsClusterListList, err error) {
	result = &v1.EsClusterListList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("esclusterlists").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested esClusterLists.
func (c *esClusterLists) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("esclusterlists").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a esClusterList and creates it.  Returns the server's representation of the esClusterList, and an error, if there is any.
func (c *esClusterLists) Create(esClusterList *v1.EsClusterList) (result *v1.EsClusterList, err error) {
	result = &v1.EsClusterList{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("esclusterlists").
		Body(esClusterList).
		Do().
		Into(result)
	return
}

// Update takes the representation of a esClusterList and updates it. Returns the server's representation of the esClusterList, and an error, if there is any.
func (c *esClusterLists) Update(esClusterList *v1.EsClusterList) (result *v1.EsClusterList, err error) {
	result = &v1.EsClusterList{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("esclusterlists").
		Name(esClusterList.Name).
		Body(esClusterList).
		Do().
		Into(result)
	return
}

// Delete takes name of the esClusterList and deletes it. Returns an error if one occurs.
func (c *esClusterLists) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("esclusterlists").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *esClusterLists) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("esclusterlists").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched esClusterList.
func (c *esClusterLists) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.EsClusterList, err error) {
	result = &v1.EsClusterList{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("esclusterlists").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}

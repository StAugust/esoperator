/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/staugust/esoperator/pkg/apis/augusto.cn/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EsClusterLister helps list EsClusters.
type EsClusterLister interface {
	// List lists all EsClusters in the indexer.
	List(selector labels.Selector) (ret []*v1.EsCluster, err error)
	// EsClusters returns an object that can list and get EsClusters.
	EsClusters(namespace string) EsClusterNamespaceLister
	EsClusterListerExpansion
}

// esClusterLister implements the EsClusterLister interface.
type esClusterLister struct {
	indexer cache.Indexer
}

// NewEsClusterLister returns a new EsClusterLister.
func NewEsClusterLister(indexer cache.Indexer) EsClusterLister {
	return &esClusterLister{indexer: indexer}
}

// List lists all EsClusters in the indexer.
func (s *esClusterLister) List(selector labels.Selector) (ret []*v1.EsCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EsCluster))
	})
	return ret, err
}

// EsClusters returns an object that can list and get EsClusters.
func (s *esClusterLister) EsClusters(namespace string) EsClusterNamespaceLister {
	return esClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EsClusterNamespaceLister helps list and get EsClusters.
type EsClusterNamespaceLister interface {
	// List lists all EsClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.EsCluster, err error)
	// Get retrieves the EsCluster from the indexer for a given namespace and name.
	Get(name string) (*v1.EsCluster, error)
	EsClusterNamespaceListerExpansion
}

// esClusterNamespaceLister implements the EsClusterNamespaceLister
// interface.
type esClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EsClusters in the indexer for a given namespace.
func (s esClusterNamespaceLister) List(selector labels.Selector) (ret []*v1.EsCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EsCluster))
	})
	return ret, err
}

// Get retrieves the EsCluster from the indexer for a given namespace and name.
func (s esClusterNamespaceLister) Get(name string) (*v1.EsCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("escluster"), name)
	}
	return obj.(*v1.EsCluster), nil
}
